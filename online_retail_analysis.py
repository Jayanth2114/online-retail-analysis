# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SahVdcmRO3hOvsNb7nWvqYrjcGrS1qek
"""

!pip install openpyxl

import pandas as pd
import matplotlib.pyplot as plt

!wget https://archive.ics.uci.edu/static/public/352/online+retail.zip

!unzip online+retail.zip

df1 = pd.read_excel('Online Retail.xlsx')

df1.info()
df1.head()

df1 = df1.astype({'InvoiceNo':'string', 'StockCode':'string', 'Description':'string', 'Country':'string'})
df1.info()

df1.shape

"""#### Data Cleaning: By handeling Missing values

Data Cleaning: By handeling Missing values
"""

df1.isnull().sum()

df1[df1["Description"].isnull()]

df1[df1.StockCode=='22139']

df1[df1.StockCode=='22139'].Description.mode()

most_freq = df1[["StockCode","Description"]].value_counts().reset_index()
most_freq

most_freq[most_freq.StockCode=='85123A']

most_freq = most_freq.groupby('StockCode').head(1)
most_freq

most_freq.columns = ['StockCode', 'Freq_Description','count']
most_freq
df2 = df1.merge(most_freq, on='StockCode', how='left')
df2.head()

df2['Description'] = df2['Freq_Description']
df2.head()

df2.isnull().sum()

df2.dropna(subset=['Description'], inplace=True)
df2.isnull().sum()

df2.drop(columns=['Freq_Description','count'], inplace=True)
df2.head()

df2.describe()

df2[df2['Quantity']<0]

df3 = df2[(df2.UnitPrice>0) & (df2.Quantity>0)]
df3.describe()

df3.Quantity.quantile(0.99)

df3.Quantity.quantile(0.9999)

df3[df3.Quantity > 1440].shape[0]

df4 = df3.copy()
df4['Total Sales'] = df4['Quantity'] * df4['UnitPrice']
df4.head()

df4['Month'] = df4['InvoiceDate'].dt.month
df4.sample(5)



"""# Visualization & EDA

1.Plot Monthly Sales
"""

monthlysales = df4.groupby('Month')['Total Sales'].sum()
monthlysales.plot(kind='line', title="Monthly Sales",marker="o")
plt.xlabel("Month")
plt.grid()
plt.ylabel("Total Sales")
plt.show()

""" ##### 2. Top 5 Countries"""

country_sales = df4.groupby('Country')['Total Sales'].sum().sort_values(ascending=False)
top_5_countries = country_sales.head(5)

plt.figure(figsize=(10, 6))
top_5_countries.plot(kind='barh', color='skyblue')
plt.title('Top 5 Countries by Total Sales')
plt.xlabel('Total Sales')
plt.ylabel('Country')
plt.gca().invert_yaxis() # Invert y-axis to show the highest sales at the top
plt.show()

# Calculate the sum of sales for all countries
total_sales = country_sales.sum()

# Calculate the percentage of total sales for each country
country_sales_percentage = (country_sales / total_sales) * 100

# Select the top 5 countries and group the rest as 'Other'
top_n = 5
other_percentage = country_sales_percentage[top_n:].sum()
top_n_countries_percentage = country_sales_percentage[:top_n]
top_n_countries_percentage['Other'] = other_percentage

# Create the pie chart
plt.figure(figsize=(8, 8))
top_n_countries_percentage.plot(kind='pie', autopct='%1.1f%%', startangle=90)
plt.title('Percentage of Total Sales by Country')
plt.ylabel('') # Remove the default y-label
plt.show()

product_wise_sales = df4.groupby('StockCode')['Total Sales'].sum().sort_values(ascending=False)
top_5_stockcodes = product_wise_sales.head(5)

plt.figure(figsize=(10, 6))
top_5_stockcodes.plot(kind='barh', color='lightgreen')
plt.title('Top 5 Stock Codes by Total Sales')
plt.xlabel('Total Sales')
plt.ylabel('Stock Code')
plt.gca().invert_yaxis()
plt.show()

df4[df4.StockCode=="DOT"]

for stock_code in top_5_stockcodes.index:
    description = df4[df4.StockCode==stock_code].Description.iloc[0]
    print(f"{stock_code}: {description}")

# Calculate the percentage of total sales for the top 5 stock codes
total_sales_stock = product_wise_sales.sum()
top_5_stockcodes_percentage = (top_5_stockcodes / total_sales_stock) * 100


# Create the horizontal bar chart
plt.figure(figsize=(10, 6))
ax = top_5_stockcodes_percentage.plot(kind='barh', color='lightgreen')

plt.title('Percentage of Total Sales by Top 5 Stock Codes')
plt.xlabel('Percentage of Total Sales')
plt.ylabel('Stock Code')
plt.gca().invert_yaxis() # Invert y-axis to show the highest percentage at the top

# Add percentage labels to the bars
for i, v in enumerate(top_5_stockcodes_percentage):
    ax.text(v + 0.5, i, f"{v:.1f}%", color='black', va='center')

plt.show()

"""4. RFM Analysis (Recency, Frequency, Monetary)"""

df4['InvoiceDate'].max()

current_date = df4['InvoiceDate'].max() + pd.Timedelta(days=1)
rfm = df4.groupby('CustomerID').agg({
    'InvoiceDate': lambda x: (current_date - x.max()).days,
    'InvoiceNo': 'count',
    'Total Sales': 'sum'
})
rfm.columns = ['Recency', 'Frequency', 'Monetary']
rfm.head()

rfm.describe()

rfm['R_Segment'] = pd.qcut(rfm['Recency'], 4, labels=[4, 3, 2, 1])
rfm['F_Segment'] = pd.qcut(rfm['Frequency'], 4, labels=[1, 2, 3, 4])
rfm['M_Segment'] = pd.qcut(rfm['Monetary'], 4, labels=[1, 2, 3, 4])
rfm['RFM_Score'] = rfm[['R_Segment', 'F_Segment', 'M_Segment']].sum(axis=1)

rfm.sample(5)

rfm.sort_values('RFM_Score', ascending=False)

"""5. Customer Churn Analysis"""

df4.head(2)

customer_last_purchase = df4.groupby("CustomerID")['InvoiceDate'].max()
customer_last_purchase.head(5)

type(customer_last_purchase)

current_date

customer_last_purchase = (current_date - customer_last_purchase).dt.days
customer_last_purchase.head(5)

churn_threshold = 90
churned_customers = customer_last_purchase[customer_last_purchase > churn_threshold]
churned_customers.head(5)

print("Number of Churned Customers:", len(churned_customers))
plt.figure(figsize=(10, 6))
plt.hist(customer_last_purchase, bins=50, color='red', alpha=0.7)
plt.axvline(churn_threshold, color='black', linestyle='dashed', linewidth=2)
plt.title('Customer Churn Distribution')
plt.xlabel('Days Since Last Purchase')
plt.ylabel('Number of Customers')
plt.show()